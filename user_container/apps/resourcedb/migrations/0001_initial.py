# Generated by Django 4.2.7 on 2025-06-09 15:37

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisAlgorithm',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, help_text='分析算法', max_length=50, null=True)),
                ('parameters', models.TextField(blank=True, help_text='分析（公式）参数', null=True)),
            ],
            options={
                'verbose_name': '分析算法',
                'verbose_name_plural': '分析算法',
                'db_table': 'AnalysisAlgorithm',
            },
        ),
        migrations.CreateModel(
            name='BaseEdge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_edge_name', models.CharField(blank=True, max_length=50, null=True)),
                ('base_edge_desc', models.CharField(blank=True, max_length=255, null=True)),
                ('geo_location', models.CharField(blank=True, max_length=255, null=True)),
                ('nation', models.CharField(blank=True, max_length=50, null=True)),
                ('province', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('district', models.CharField(blank=True, max_length=50, null=True)),
                ('street', models.CharField(blank=True, max_length=50, null=True)),
                ('no', models.CharField(blank=True, max_length=50, null=True)),
                ('location', models.CharField(blank=True, max_length=50, null=True)),
                ('attribute', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': '边基类',
                'verbose_name_plural': '边基类',
                'db_table': 'BaseEdge',
            },
        ),
        migrations.CreateModel(
            name='BaseNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_node_name', models.CharField(blank=True, max_length=50, null=True)),
                ('base_node_desc', models.CharField(blank=True, max_length=255, null=True)),
                ('geo_location', models.CharField(blank=True, max_length=255, null=True)),
                ('nation', models.CharField(blank=True, max_length=50, null=True)),
                ('province', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('district', models.CharField(blank=True, max_length=50, null=True)),
                ('street', models.CharField(blank=True, max_length=50, null=True)),
                ('no', models.CharField(blank=True, max_length=50, null=True)),
                ('location', models.CharField(blank=True, max_length=50, null=True)),
                ('attribute', models.JSONField(blank=True, null=True)),
                ('cis_type', models.CharField(blank=True, choices=[('001', '001'), ('002', '002'), ('003', '003'), ('004', '004'), ('005', '005'), ('006', '006')], max_length=3, null=True)),
                ('sub_type', models.CharField(blank=True, choices=[('1-1Terminal', '1-1Terminal'), ('1-2Bearer', '1-2Bearer'), ('2-1Gen', '2-1Gen'), ('2-2Trans', '2-2Trans'), ('2-3Dis', '2-3Dis'), ('2-4Load', '2-4Load'), ('3-1GasExploit', '3-1GasExploit'), ('3-2GasTrans', '3-2GasTrans'), ('3-3GasLoad', '3-3GasLoad'), ('4-1Draw', '4-1Draw'), ('4-2Gen', '4-2Gen'), ('4-3Trans', '4-3Trans'), ('4-4Dis', '4-4Dis'), ('4-5SecondSup', '4-5SecondSup'), ('4-6Load', '4-6Load')], max_length=15, null=True)),
                ('model_name', models.CharField(blank=True, help_text='仿真模型的名称', max_length=50, null=True)),
                ('coverage', models.CharField(blank=True, help_text='覆盖区域，与具体的区域表对应', max_length=255, null=True)),
                ('owner', models.CharField(blank=True, help_text='所有者', max_length=50, null=True)),
            ],
            options={
                'verbose_name': '节点基类',
                'verbose_name_plural': '节点基类',
                'db_table': 'BaseNode',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[('Initial', 'Initial'), ('Suspend', 'Suspend'), ('End', 'End')], max_length=10, null=True)),
            ],
            options={
                'verbose_name': '条件',
                'verbose_name_plural': '条件',
                'db_table': 'Conditions',
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': '配置',
                'verbose_name_plural': '配置',
                'db_table': 'Configuration',
            },
        ),
        migrations.CreateModel(
            name='Diagram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('configuration', models.ForeignKey(help_text='配置ID', on_delete=django.db.models.deletion.RESTRICT, related_name='diagrams', to='resourcedb.configuration')),
            ],
            options={
                'verbose_name': '图表',
                'verbose_name_plural': '图表',
                'db_table': 'Diagram',
            },
        ),
        migrations.CreateModel(
            name='Execution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iteration', models.IntegerField(blank=True, help_text='迭代次数', null=True)),
            ],
            options={
                'verbose_name': '执行',
                'verbose_name_plural': '执行',
                'db_table': 'Execution',
            },
        ),
        migrations.CreateModel(
            name='FormatConversion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_format', models.CharField(blank=True, help_text='输入格式', max_length=50, null=True)),
                ('output_format', models.CharField(blank=True, help_text='输出格式', max_length=50, null=True)),
            ],
            options={
                'verbose_name': '格式转换',
                'verbose_name_plural': '格式转换',
                'db_table': 'FormatConvertion',
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('FinancialLayer', 'Financial Layer'), ('TransportationLayer', 'Transportation Layer'), ('WaterLayer', 'Water Layer'), ('OilGasLayer', 'Oil Gas Layer'), ('TelecommunicationLayer', 'Telecommunication Layer'), ('PowerLayer', 'Power Layer'), ('EconomicGraphicLayer', 'Economic Graphic Layer'), ('demographicLayer', 'Demographic Layer'), ('GeographicLayer', 'Geographic Layer'), ('MutualLayer', 'Mutual Layer')], max_length=30, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='图层创建时间')),
            ],
            options={
                'verbose_name': '图层',
                'verbose_name_plural': '图层',
                'db_table': 'Layer',
            },
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': '地图',
                'verbose_name_plural': '地图',
                'db_table': 'Map',
            },
        ),
        migrations.CreateModel(
            name='MechanismRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business', models.TextField(blank=True, help_text='表述业务关系', null=True)),
                ('function', models.TextField(blank=True, help_text='表述功能', null=True)),
                ('composition', models.TextField(blank=True, help_text='表述组成', null=True)),
                ('behavior', models.TextField(blank=True, help_text='表述行为关系', null=True)),
                ('state', models.TextField(blank=True, help_text='表述状态关系', null=True)),
            ],
            options={
                'verbose_name': '机制关系',
                'verbose_name_plural': '机制关系',
                'db_table': 'MechanismRelationShip',
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_data', models.JSONField(blank=True, help_text='记录的内容', null=True)),
            ],
            options={
                'verbose_name': '记录',
                'verbose_name_plural': '记录',
                'db_table': 'Record',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_algorithm', models.ForeignKey(help_text='分析算法ID', on_delete=django.db.models.deletion.RESTRICT, related_name='results', to='resourcedb.analysisalgorithm')),
                ('format_conversion', models.ForeignKey(help_text='格式转换ID', on_delete=django.db.models.deletion.RESTRICT, related_name='results', to='resourcedb.formatconversion')),
            ],
            options={
                'verbose_name': '结果',
                'verbose_name_plural': '结果',
                'db_table': 'Result',
            },
        ),
        migrations.CreateModel(
            name='Technique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('SELECT', 'Select'), ('Order', 'Order'), ('Random', 'Random')], max_length=10, null=True)),
            ],
            options={
                'verbose_name': '技术',
                'verbose_name_plural': '技术',
                'db_table': 'Technique',
            },
        ),
        migrations.CreateModel(
            name='Edge',
            fields=[
                ('base_edge', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, primary_key=True, related_name='edge', serialize=False, to='resourcedb.baseedge')),
                ('destination_node', models.ForeignKey(help_text='目标节点ID', on_delete=django.db.models.deletion.RESTRICT, related_name='incoming_edges', to='resourcedb.basenode')),
                ('mechanism_relationship', models.ForeignKey(help_text='边业务属性', on_delete=django.db.models.deletion.RESTRICT, related_name='edges', to='resourcedb.mechanismrelationship')),
                ('source_node', models.ForeignKey(help_text='源节点ID', on_delete=django.db.models.deletion.RESTRICT, related_name='outgoing_edges', to='resourcedb.basenode')),
            ],
            options={
                'verbose_name': '边',
                'verbose_name_plural': '边',
                'db_table': 'Edge',
            },
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.ForeignKey(help_text='条件ID', on_delete=django.db.models.deletion.RESTRICT, related_name='simulations', to='resourcedb.condition')),
                ('execution', models.ForeignKey(help_text='执行ID', on_delete=django.db.models.deletion.RESTRICT, related_name='simulations', to='resourcedb.execution')),
                ('result', models.ForeignKey(help_text='结果ID', on_delete=django.db.models.deletion.RESTRICT, related_name='simulations', to='resourcedb.result')),
            ],
            options={
                'verbose_name': '仿真',
                'verbose_name_plural': '仿真',
                'db_table': 'Simulation',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='项目名称', max_length=100)),
                ('description', models.TextField(blank=True, help_text='项目描述', null=True)),
                ('task_modes', models.JSONField(default=list, help_text='任务模式（支持多选）')),
                ('status', models.CharField(choices=[('pending', '待处理'), ('initial', '初始化完成'), ('success', '环境部署成功'), ('ending', '任务结束')], default='pending', help_text='项目状态', max_length=20)),
                ('pod_id', models.CharField(blank=True, help_text='K8s Pod ID（仅单点模式）', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('diagram', models.ForeignKey(help_text='图表ID', on_delete=django.db.models.deletion.RESTRICT, related_name='projects', to='resourcedb.diagram')),
                ('layers', models.ManyToManyField(help_text='关联的图层ID集合', related_name='projects', to='resourcedb.layer')),
                ('map', models.ForeignKey(help_text='关联的地图ID', on_delete=django.db.models.deletion.RESTRICT, related_name='projects', to='resourcedb.map')),
                ('simulation', models.ForeignKey(help_text='仿真ID', on_delete=django.db.models.deletion.RESTRICT, related_name='projects', to='resourcedb.simulation')),
            ],
            options={
                'verbose_name': '项目',
                'verbose_name_plural': '项目',
                'db_table': 'Project',
            },
        ),
        migrations.AddField(
            model_name='execution',
            name='record',
            field=models.ForeignKey(help_text='记录ID', on_delete=django.db.models.deletion.RESTRICT, related_name='executions', to='resourcedb.record'),
        ),
        migrations.AddField(
            model_name='diagram',
            name='map',
            field=models.ForeignKey(help_text='地图ID', on_delete=django.db.models.deletion.RESTRICT, related_name='diagrams', to='resourcedb.map'),
        ),
        migrations.AddField(
            model_name='diagram',
            name='technique',
            field=models.ForeignKey(help_text='技术ID', on_delete=django.db.models.deletion.RESTRICT, related_name='diagrams', to='resourcedb.technique'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='layer',
            field=models.ForeignKey(help_text='图层ID', on_delete=django.db.models.deletion.RESTRICT, related_name='configurations', to='resourcedb.layer'),
        ),
        migrations.CreateModel(
            name='TargetNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_sequence', models.IntegerField(blank=True, help_text='执行步序(优先级)', null=True)),
                ('target_effect', models.FloatField(blank=True, help_text='影响效果', null=True)),
                ('node', models.ForeignKey(help_text='目标节点ID', on_delete=django.db.models.deletion.RESTRICT, related_name='target_nodes', to='resourcedb.basenode')),
                ('technique', models.ForeignKey(help_text='技术ID', on_delete=django.db.models.deletion.RESTRICT, related_name='target_nodes', to='resourcedb.technique')),
            ],
            options={
                'verbose_name': '目标节点',
                'verbose_name_plural': '目标节点',
                'db_table': 'TargetNode',
                'unique_together': {('technique', 'node')},
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_node', models.ForeignKey(help_text='基础节点ID', on_delete=django.db.models.deletion.RESTRICT, related_name='nodes', to='resourcedb.basenode')),
                ('layer', models.ForeignKey(help_text='图层ID', on_delete=django.db.models.deletion.RESTRICT, related_name='nodes', to='resourcedb.layer')),
            ],
            options={
                'verbose_name': '节点',
                'verbose_name_plural': '节点',
                'db_table': 'Node',
                'unique_together': {('layer', 'base_node')},
            },
        ),
        migrations.CreateModel(
            name='MapLayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layer', models.ForeignKey(help_text='图层ID', on_delete=django.db.models.deletion.RESTRICT, related_name='map_layers', to='resourcedb.layer')),
                ('map', models.ForeignKey(help_text='地图ID', on_delete=django.db.models.deletion.RESTRICT, related_name='map_layers', to='resourcedb.map')),
            ],
            options={
                'verbose_name': '地图图层映射',
                'verbose_name_plural': '地图图层映射',
                'db_table': 'Map_Layer',
                'unique_together': {('map', 'layer')},
            },
        ),
        migrations.CreateModel(
            name='IntraEdge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layer', models.ForeignKey(help_text='图层ID', on_delete=django.db.models.deletion.RESTRICT, related_name='intra_edges', to='resourcedb.layer')),
                ('edge', models.ForeignKey(help_text='边ID', on_delete=django.db.models.deletion.RESTRICT, related_name='intra_edges', to='resourcedb.edge')),
            ],
            options={
                'verbose_name': '层内边',
                'verbose_name_plural': '层内边',
                'db_table': 'IntraEdge',
                'unique_together': {('layer', 'edge')},
            },
        ),
    ]
