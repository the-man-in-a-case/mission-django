# Generated by Django 4.2.7 on 2025-06-07 13:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContainerInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instance_id', models.CharField(max_length=100, verbose_name='实例ID')),
                ('pod_name', models.CharField(max_length=100, verbose_name='Pod名称')),
                ('pod_ip', models.GenericIPAddressField(verbose_name='Pod IP')),
                ('port', models.IntegerField(default=8080, verbose_name='端口')),
                ('status', models.CharField(choices=[('starting', '启动中'), ('running', '运行中'), ('stopping', '停止中'), ('stopped', '已停止'), ('failed', '失败'), ('unknown', '未知')], default='starting', max_length=20, verbose_name='状态')),
                ('is_healthy', models.BooleanField(default=False, verbose_name='健康状态')),
                ('consecutive_failures', models.IntegerField(default=0, verbose_name='连续失败次数')),
                ('weight', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='权重')),
                ('current_connections', models.IntegerField(default=0, verbose_name='当前连接数')),
                ('health_check_url', models.CharField(blank=True, max_length=200, verbose_name='健康检查URL')),
                ('last_health_check', models.DateTimeField(blank=True, null=True, verbose_name='最后健康检查时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '容器实例',
                'verbose_name_plural': '容器实例',
                'db_table': 'container_instances',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('permission_level', models.CharField(choices=[('basic', '基础用户'), ('premium', '高级用户'), ('enterprise', '企业用户'), ('admin', '管理员')], default='basic', max_length=20)),
                ('status', models.CharField(choices=[('active', '活跃'), ('inactive', '非活跃'), ('suspended', '暂停'), ('deleted', '已删除')], default='active', max_length=20)),
                ('container_id', models.CharField(blank=True, max_length=255, null=True)),
                ('container_status', models.CharField(default='pending', max_length=50)),
                ('cpu_limit', models.CharField(default='1000m', max_length=10)),
                ('memory_limit', models.CharField(default='2Gi', max_length=10)),
                ('storage_limit', models.CharField(default='10Gi', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='该用户所属的用户组。用户将获得授予其所属每个用户组的所有权限。', related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='用户组')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='该用户的特定权限。', related_name='custom_user_set', related_query_name='custom_user', to='auth.permission', verbose_name='用户权限')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserContainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('container_name', models.CharField(max_length=100, verbose_name='容器名称')),
                ('deployment_name', models.CharField(max_length=100, verbose_name='Deployment名称')),
                ('service_name', models.CharField(max_length=100, verbose_name='Service名称')),
                ('namespace', models.CharField(default='user-containers', max_length=50, verbose_name='命名空间')),
                ('cluster_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='集群IP')),
                ('external_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='外部IP')),
                ('port', models.IntegerField(default=8080, verbose_name='端口')),
                ('status', models.CharField(choices=[('creating', '创建中'), ('running', '运行中'), ('stopped', '已停止'), ('error', '错误'), ('destroying', '销毁中'), ('pending', '等待中')], default='creating', max_length=20, verbose_name='状态')),
                ('replicas', models.IntegerField(default=1, verbose_name='副本数')),
                ('ready_replicas', models.IntegerField(default=0, verbose_name='就绪副本数')),
                ('cpu_request', models.CharField(default='500m', max_length=20, verbose_name='CPU请求')),
                ('memory_request', models.CharField(default='1Gi', max_length=20, verbose_name='内存请求')),
                ('cpu_limit', models.CharField(default='1000m', max_length=20, verbose_name='CPU限制')),
                ('memory_limit', models.CharField(default='2Gi', max_length=20, verbose_name='内存限制')),
                ('storage_size', models.CharField(default='10Gi', max_length=20, verbose_name='存储大小')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('last_accessed', models.DateTimeField(blank=True, null=True, verbose_name='最后访问时间')),
                ('labels', models.JSONField(blank=True, default=dict, verbose_name='标签')),
                ('annotations', models.JSONField(blank=True, default=dict, verbose_name='注解')),
                ('environment_vars', models.JSONField(blank=True, default=dict, verbose_name='环境变量')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='container', to='userdb.user')),
            ],
            options={
                'verbose_name': '用户容器',
                'verbose_name_plural': '用户容器',
                'db_table': 'user_containers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('login', '登录'), ('logout', '登出'), ('container_start', '容器启动'), ('container_stop', '容器停止'), ('business_process', '业务流程'), ('data_sync', '数据同步')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='userdb.user')),
            ],
            options={
                'verbose_name': '用户活动',
                'verbose_name_plural': '用户活动',
                'db_table': 'user_activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RouteRegistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route_path', models.CharField(max_length=200, verbose_name='路由路径')),
                ('target_service', models.CharField(max_length=100, verbose_name='目标服务名')),
                ('target_namespace', models.CharField(default='user-containers', max_length=50, verbose_name='目标命名空间')),
                ('load_balance_strategy', models.CharField(choices=[('round_robin', '轮询'), ('least_conn', '最少连接'), ('weighted', '权重'), ('ip_hash', 'IP哈希'), ('response_time', '响应时间')], default='round_robin', max_length=20, verbose_name='负载均衡策略')),
                ('health_check_enabled', models.BooleanField(default=True, verbose_name='启用健康检查')),
                ('health_check_path', models.CharField(default='/health', max_length=200, verbose_name='健康检查路径')),
                ('health_check_interval', models.IntegerField(default=30, verbose_name='健康检查间隔(秒)')),
                ('health_check_timeout', models.IntegerField(default=5, verbose_name='健康检查超时(秒)')),
                ('max_failures', models.IntegerField(default=3, verbose_name='最大失败次数')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('last_route_time', models.DateTimeField(blank=True, null=True, verbose_name='最后路由时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('container', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='route_registry', to='userdb.usercontainer')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='route_registry', to='userdb.user')),
            ],
            options={
                'verbose_name': '路由注册表',
                'verbose_name_plural': '路由注册表',
                'db_table': 'route_registry',
            },
        ),
        migrations.CreateModel(
            name='RouteMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_requests', models.BigIntegerField(default=0, verbose_name='总请求数')),
                ('successful_requests', models.BigIntegerField(default=0, verbose_name='成功请求数')),
                ('failed_requests', models.BigIntegerField(default=0, verbose_name='失败请求数')),
                ('avg_response_time', models.FloatField(default=0.0, verbose_name='平均响应时间(ms)')),
                ('min_response_time', models.FloatField(default=0.0, verbose_name='最小响应时间(ms)')),
                ('max_response_time', models.FloatField(default=0.0, verbose_name='最大响应时间(ms)')),
                ('timeout_count', models.IntegerField(default=0, verbose_name='超时次数')),
                ('connection_error_count', models.IntegerField(default=0, verbose_name='连接错误次数')),
                ('server_error_count', models.IntegerField(default=0, verbose_name='服务器错误次数')),
                ('last_request_time', models.DateTimeField(blank=True, null=True, verbose_name='最后请求时间')),
                ('reset_time', models.DateTimeField(auto_now_add=True, verbose_name='重置时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('route_registry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='userdb.routeregistry', verbose_name='路由注册')),
            ],
            options={
                'verbose_name': '路由指标',
                'verbose_name_plural': '路由指标',
                'db_table': 'route_metrics',
            },
        ),
        migrations.CreateModel(
            name='RouteLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(db_index=True, max_length=100, verbose_name='请求ID')),
                ('request_method', models.CharField(max_length=10, verbose_name='请求方法')),
                ('request_path', models.CharField(max_length=500, verbose_name='请求路径')),
                ('request_headers', models.JSONField(blank=True, default=dict, verbose_name='请求头')),
                ('client_ip', models.GenericIPAddressField(verbose_name='客户端IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='用户代理')),
                ('target_url', models.CharField(max_length=500, verbose_name='目标URL')),
                ('load_balance_strategy', models.CharField(max_length=20, verbose_name='负载均衡策略')),
                ('response_status', models.IntegerField(blank=True, null=True, verbose_name='响应状态码')),
                ('response_time', models.FloatField(blank=True, null=True, verbose_name='响应时间(ms)')),
                ('response_size', models.BigIntegerField(blank=True, null=True, verbose_name='响应大小(bytes)')),
                ('error_type', models.CharField(blank=True, choices=[('timeout', '超时'), ('connection', '连接错误'), ('server', '服务器错误'), ('client', '客户端错误'), ('gateway', '网关错误')], max_length=20, null=True, verbose_name='错误类型')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='错误信息')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='时间戳')),
                ('container_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='route_logs', to='userdb.containerinstance', verbose_name='容器实例')),
                ('route_registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='userdb.routeregistry', verbose_name='路由注册')),
            ],
            options={
                'verbose_name': '路由日志',
                'verbose_name_plural': '路由日志',
                'db_table': 'route_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LoadBalancerConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_connections', models.IntegerField(default=100, verbose_name='最大连接数')),
                ('connection_timeout', models.IntegerField(default=30, verbose_name='连接超时(秒)')),
                ('idle_timeout', models.IntegerField(default=60, verbose_name='空闲超时(秒)')),
                ('retry_attempts', models.IntegerField(default=3, verbose_name='重试次数')),
                ('retry_delay', models.FloatField(default=1.0, verbose_name='重试延迟(秒)')),
                ('circuit_breaker_enabled', models.BooleanField(default=True, verbose_name='启用熔断器')),
                ('failure_threshold', models.IntegerField(default=5, verbose_name='失败阈值')),
                ('recovery_timeout', models.IntegerField(default=60, verbose_name='恢复超时(秒)')),
                ('rate_limit_enabled', models.BooleanField(default=False, verbose_name='启用限流')),
                ('requests_per_minute', models.IntegerField(default=1000, verbose_name='每分钟请求数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('route_registry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='load_balancer_config', to='userdb.routeregistry', verbose_name='路由注册')),
            ],
            options={
                'verbose_name': '负载均衡配置',
                'verbose_name_plural': '负载均衡配置',
                'db_table': 'load_balancer_config',
            },
        ),
        migrations.CreateModel(
            name='HealthCheckRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_healthy', models.BooleanField(verbose_name='是否健康')),
                ('response_time', models.FloatField(blank=True, null=True, verbose_name='响应时间(ms)')),
                ('status_code', models.IntegerField(blank=True, null=True, verbose_name='状态码')),
                ('check_url', models.CharField(max_length=200, verbose_name='检查URL')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='错误信息')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='详细信息')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='检查时间')),
                ('container_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_records', to='userdb.containerinstance', verbose_name='容器实例')),
            ],
            options={
                'verbose_name': '健康检查记录',
                'verbose_name_plural': '健康检查记录',
                'db_table': 'health_check_records',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GatewayNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.CharField(max_length=100, unique=True, verbose_name='节点ID')),
                ('hostname', models.CharField(max_length=255, verbose_name='主机名')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('port', models.IntegerField(default=8080, verbose_name='端口')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('cpu_usage', models.FloatField(default=0.0, verbose_name='CPU使用率')),
                ('memory_usage', models.FloatField(default=0.0, verbose_name='内存使用率')),
                ('current_connections', models.IntegerField(default=0, verbose_name='当前连接数')),
                ('total_requests', models.BigIntegerField(default=0, verbose_name='总请求数')),
                ('last_heartbeat', models.DateTimeField(auto_now=True, verbose_name='最后心跳时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '网关节点',
                'verbose_name_plural': '网关节点',
                'db_table': 'gateway_nodes',
                'indexes': [models.Index(fields=['is_active', 'last_heartbeat'], name='gateway_nod_is_acti_d43b4e_idx')],
            },
        ),
        migrations.AddField(
            model_name='containerinstance',
            name='container',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='userdb.usercontainer', verbose_name='所属容器'),
        ),
        migrations.AddIndex(
            model_name='usercontainer',
            index=models.Index(fields=['user'], name='user_contai_user_id_fe9fc1_idx'),
        ),
        migrations.AddIndex(
            model_name='usercontainer',
            index=models.Index(fields=['status'], name='user_contai_status_4863ec_idx'),
        ),
        migrations.AddIndex(
            model_name='usercontainer',
            index=models.Index(fields=['namespace', 'deployment_name'], name='user_contai_namespa_6127aa_idx'),
        ),
        migrations.AddIndex(
            model_name='routeregistry',
            index=models.Index(fields=['user', 'is_active'], name='route_regis_user_id_489176_idx'),
        ),
        migrations.AddIndex(
            model_name='routeregistry',
            index=models.Index(fields=['is_active', 'created_at'], name='route_regis_is_acti_7ab0f3_idx'),
        ),
        migrations.AddIndex(
            model_name='routelog',
            index=models.Index(fields=['route_registry', 'timestamp'], name='route_logs_route_r_f987be_idx'),
        ),
        migrations.AddIndex(
            model_name='routelog',
            index=models.Index(fields=['request_id'], name='route_logs_request_d8e4ea_idx'),
        ),
        migrations.AddIndex(
            model_name='routelog',
            index=models.Index(fields=['response_status', 'timestamp'], name='route_logs_respons_72a4d5_idx'),
        ),
        migrations.AddIndex(
            model_name='routelog',
            index=models.Index(fields=['error_type', 'timestamp'], name='route_logs_error_t_cb4746_idx'),
        ),
        migrations.AddIndex(
            model_name='healthcheckrecord',
            index=models.Index(fields=['container_instance', 'timestamp'], name='health_chec_contain_64bad1_idx'),
        ),
        migrations.AddIndex(
            model_name='healthcheckrecord',
            index=models.Index(fields=['is_healthy', 'timestamp'], name='health_chec_is_heal_bcf07d_idx'),
        ),
        migrations.AddIndex(
            model_name='containerinstance',
            index=models.Index(fields=['container', 'status'], name='container_i_contain_1f3e17_idx'),
        ),
        migrations.AddIndex(
            model_name='containerinstance',
            index=models.Index(fields=['is_healthy'], name='container_i_is_heal_ad64fb_idx'),
        ),
        migrations.AddIndex(
            model_name='containerinstance',
            index=models.Index(fields=['status'], name='container_i_status_88cc80_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='containerinstance',
            unique_together={('container', 'instance_id')},
        ),
    ]
